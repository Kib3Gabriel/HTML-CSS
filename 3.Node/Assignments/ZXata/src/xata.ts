// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  BaseSchema,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";
import dotenv from 'dotenv';

// const tables = [
//   {
//     name: "personInfo",
//     checkConstraints: {
//       personInfo_xata_id_length_xata_id: {
//         name: "personInfo_xata_id_length_xata_id",
//         columns: ["xata_id"],
//         definition: "CHECK ((length(xata_id) < 256))",
//       },
//     },
//     foreignKeys: {},
//     primaryKey: [],
//     uniqueConstraints: {
//       _pgroll_new_personInfo_xata_id_key: {
//         name: "_pgroll_new_personInfo_xata_id_key",
//         columns: ["xata_id"],
//       },
//     },
//     columns: [
//       {
//         name: "email",
//         type: "text",
//         notNull: false,
//         unique: false,
//         defaultValue: null,
//         comment: "",
//       },
//       {
//         name: "name",
//         type: "text",
//         notNull: false,
//         unique: false,
//         defaultValue: null,
//         comment: "",
//       },
//       {
//         name: "password",
//         type: "text",
//         notNull: false,
//         unique: false,
//         defaultValue: null,
//         comment: "",
//       },
//       {
//         name: "xata_createdat",
//         type: "datetime",
//         notNull: true,
//         unique: false,
//         defaultValue: "now()",
//         comment: "",
//       },
//       {
//         name: "xata_id",
//         type: "text",
//         notNull: true,
//         unique: true,
//         defaultValue: "('rec_'::text || (xata_private.xid())::text)",
//         comment: "",
//       },
//       {
//         name: "xata_updatedat",
//         type: "datetime",
//         notNull: true,
//         unique: false,
//         defaultValue: "now()",
//         comment: "",
//       },
//       {
//         name: "xata_version",
//         type: "int",
//         notNull: true,
//         unique: false,
//         defaultValue: "0",
//         comment: "",
//       },
//     ],
//   },
// ] as const;

//Load environment variables from .env file dotenv.config()
dotenv.config();

const tables:readonly BaseSchema[] =[
  {
    name:'personInfo',
    columns:[
      {name:'name', type:'string'},
      {name:'email', type:'string'},
      {name:'password', type:'string'}
    ]
  }
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

// export type PersonInfo = InferredTypes["personInfo"];
// export type PersonInfoRecord = PersonInfo & XataRecord;


// Define the database schema
export type PersonInfoRecord = XataRecord & {
  email: string;
  password: string;
  name: string;
};

// export type DatabaseSchema = {
//   users: UserRecord;
// };

export type DatabaseSchema = {
  personInfo: PersonInfoRecord;
};


const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Gabriel254-s-workspace-cvhlb9.us-east-1.xata.sh/db/simpleDB",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
